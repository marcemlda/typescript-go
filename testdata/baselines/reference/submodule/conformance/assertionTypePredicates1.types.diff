--- old.assertionTypePredicates1.types
+++ new.assertionTypePredicates1.types
@@= skipped -84, +84 lines =@@
 >"number" : "number"
 
         x.toLocaleString;
->x.toLocaleString : (() => string) | ((locales?: string | string[], options?: Intl.NumberFormatOptions) => string)
+>x.toLocaleString : () => string | (locales?: string | string[] | undefined, options?: NumberFormatOptions | undefined) => string
 >x : number | boolean
->toLocaleString : (() => string) | ((locales?: string | string[], options?: Intl.NumberFormatOptions) => string)
+>toLocaleString : () => string | (locales?: string | string[] | undefined, options?: NumberFormatOptions | undefined) => string
     }
     if (!!true) {
 >!!true : true
@@= skipped -187, +187 lines =@@
 >Debug : typeof Debug
 
     export declare function assert(value: unknown, message?: string): asserts value;
->assert : (value: unknown, message?: string) => asserts value
+>assert : (value: unknown, message?: string | undefined) => asserts value
 >value : unknown
 >message : string | undefined
 
@@= skipped -20, +20 lines =@@
 
         Debug.assert(x);
 >Debug.assert(x) : void
->Debug.assert : (value: unknown, message?: string) => asserts value
+>Debug.assert : (value: unknown, message?: string | undefined) => asserts value
 >Debug : typeof Debug
->assert : (value: unknown, message?: string) => asserts value
+>assert : (value: unknown, message?: string | undefined) => asserts value
 >x : string | undefined
 
         x.length;
@@= skipped -17, +17 lines =@@
 
         Debug.assert(x !== undefined);
 >Debug.assert(x !== undefined) : void
->Debug.assert : (value: unknown, message?: string) => asserts value
+>Debug.assert : (value: unknown, message?: string | undefined) => asserts value
 >Debug : typeof Debug
->assert : (value: unknown, message?: string) => asserts value
+>assert : (value: unknown, message?: string | undefined) => asserts value
 >x !== undefined : boolean
 >x : string | undefined
 >undefined : undefined
@@= skipped -36, +36 lines =@@
 
         Debug.assert(false);
 >Debug.assert(false) : void
->Debug.assert : (value: unknown, message?: string) => asserts value
+>Debug.assert : (value: unknown, message?: string | undefined) => asserts value
 >Debug : typeof Debug
->assert : (value: unknown, message?: string) => asserts value
+>assert : (value: unknown, message?: string | undefined) => asserts value
 >false : false
 
         x;  // Unreachable
@@= skipped -254, +254 lines =@@
 >"string" : "string"
 
     const a = [assert];
->a : ((value: unknown) => asserts value)[]
->[assert] : ((value: unknown) => asserts value)[]
+>a : (value: unknown) => asserts value[]
+>[assert] : (value: unknown) => asserts value[]
 >assert : (value: unknown) => asserts value
 
     a[0](typeof x === "string");  // Error
 >a[0](typeof x === "string") : void
 >a[0] : (value: unknown) => asserts value
->a : ((value: unknown) => asserts value)[]
+>a : (value: unknown) => asserts value[]
 >0 : 0
 >typeof x === "string" : boolean
 >typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
@@= skipped -184, +184 lines =@@
 >x : TestPropertySignature
 }
 function testFunctionThisParameter1(
->testFunctionThisParameter1 : (this: TestPropertySignature, x: unknown) => void
+>testFunctionThisParameter1 : (x: unknown) => void
 
   this: TestPropertySignature,
 >this : TestPropertySignature
@@= skipped -46, +46 lines =@@
 >x : TestMethodSignature
 }
 function testFunctionThisParameter2(
->testFunctionThisParameter2 : (this: TestMethodSignature, x: unknown) => void
+>testFunctionThisParameter2 : (x: unknown) => void
 
   this: TestMethodSignature,
 >this : TestMethodSignature
