--- old.bivariantInferences.types
+++ new.bivariantInferences.types
@@= skipped -4, +4 lines =@@
 
 interface Array<T> {
     equalsShallow<T>(this: ReadonlyArray<T>, other: ReadonlyArray<T>): boolean;
->equalsShallow : <T>(this: ReadonlyArray<T>, other: ReadonlyArray<T>) => boolean
+>equalsShallow : <T>(other: readonly T[]) => boolean
 >this : readonly T[]
 >other : readonly T[]
 }
@@= skipped -14, +14 lines =@@
 let x = a.equalsShallow(b);
 >x : boolean
 >a.equalsShallow(b) : boolean
->a.equalsShallow : (<T>(this: readonly T[], other: readonly T[]) => boolean) | (<T>(this: readonly T[], other: readonly T[]) => boolean) | (<T>(this: readonly T[], other: readonly T[]) => boolean) | (<T>(this: readonly T[], other: readonly T[]) => boolean)
+>a.equalsShallow : <T>(other: readonly T[]) => boolean | <T>(other: readonly T[]) => boolean | <T>(other: readonly T[]) => boolean | <T>(other: readonly T[]) => boolean
 >a : undefined[] | null[] | {}[] | (string | number)[]
->equalsShallow : (<T>(this: readonly T[], other: readonly T[]) => boolean) | (<T>(this: readonly T[], other: readonly T[]) => boolean) | (<T>(this: readonly T[], other: readonly T[]) => boolean) | (<T>(this: readonly T[], other: readonly T[]) => boolean)
+>equalsShallow : <T>(other: readonly T[]) => boolean | <T>(other: readonly T[]) => boolean | <T>(other: readonly T[]) => boolean | <T>(other: readonly T[]) => boolean
 >b : undefined[] | null[] | {}[] | (string | number)[]
 
