--- old.typeGuardOfFormTypeOfFunction.types
+++ new.typeGuardOfFormTypeOfFunction.types
@@= skipped -92, +92 lines =@@
 }
 
 function f10(x: string | (() => string)) {
->f10 : (x: string | (() => string)) => void
->x : string | (() => string)
+>f10 : (x: string | () => string) => void
+>x : string | () => string
 
     if (typeof x === "function") {
 >typeof x === "function" : boolean
 >typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
->x : string | (() => string)
+>x : string | () => string
 >"function" : "function"
 
         x;  // () => string
@@= skipped -19, +19 lines =@@
 }
 
 function f11(x: { s: string } | (() => string)) {
->f11 : (x: { s: string; } | (() => string)) => void
->x : { s: string; } | (() => string)
+>f11 : (x: { s: string; } | () => string) => void
+>x : { s: string; } | () => string
 >s : string
 
     if (typeof x === "function") {
 >typeof x === "function" : boolean
 >typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
->x : { s: string; } | (() => string)
+>x : { s: string; } | () => string
 >"function" : "function"
 
         x;  // () => string
@@= skipped -65, +65 lines =@@
 
             item.call(obj);
 >item.call(obj) : any
->item.call : (this: Function, thisArg: any, ...argArray: any[]) => any
+>item.call : (thisArg: any, ...argArray: any[]) => any
 >item : T[K] & Function
->call : (this: Function, thisArg: any, ...argArray: any[]) => any
+>call : (thisArg: any, ...argArray: any[]) => any
 >obj : T
     }
 }
@@= skipped -10, +10 lines =@@
 // Repro from #49316
 
 function configureStore<S extends object>(reducer: (() => void) | Record<keyof S, () => void>) {
->configureStore : <S extends object>(reducer: (() => void) | Record<keyof S, () => void>) => void
->reducer : Record<keyof S, () => void> | (() => void)
+>configureStore : <S extends object>(reducer: Record<keyof S, () => void> | () => void) => void
+>reducer : Record<keyof S, () => void> | () => void
 
     let rootReducer: () => void;
 >rootReducer : () => void
@@= skipped -9, +9 lines =@@
     if (typeof reducer === 'function') {
 >typeof reducer === 'function' : boolean
 >typeof reducer : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
->reducer : Record<keyof S, () => void> | (() => void)
+>reducer : Record<keyof S, () => void> | () => void
 >'function' : "function"
 
         rootReducer = reducer;
