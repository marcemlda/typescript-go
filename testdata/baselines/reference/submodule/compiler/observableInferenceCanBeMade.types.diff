--- old.observableInferenceCanBeMade.types
+++ new.observableInferenceCanBeMade.types
@@= skipped -15, +15 lines =@@
 
 interface Subscribable<T> {
     subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): void;
->subscribe : (next?: (value: T) => void, error?: (error: any) => void, complete?: () => void) => void
->next : ((value: T) => void) | undefined
+>subscribe : (next?: (value: T) => void | undefined, error?: (error: any) => void | undefined, complete?: () => void | undefined) => void
+>next : (value: T) => void | undefined
 >value : T
->error : ((error: any) => void) | undefined
+>error : (error: any) => void | undefined
 >error : any
->complete : (() => void) | undefined
+>complete : () => void | undefined
 }
 type ObservableInput<T> = Subscribable<T> | Subscribable<never>;
 >ObservableInput : ObservableInput<T>
@@= skipped -15, +15 lines =@@
 >Observable : Observable<T>
 
     subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): void;
->subscribe : (next?: (value: T) => void, error?: (error: any) => void, complete?: () => void) => void
->next : ((value: T) => void) | undefined
+>subscribe : (next?: (value: T) => void | undefined, error?: (error: any) => void | undefined, complete?: () => void | undefined) => void
+>next : (value: T) => void | undefined
 >value : T
->error : ((error: any) => void) | undefined
+>error : (error: any) => void | undefined
 >error : any
->complete : (() => void) | undefined
+>complete : () => void | undefined
 }
 
 function asObservable(input: string | ObservableInput<string>): Observable<string> {
