--- old.deeplyNestedMappedTypes.types
+++ new.deeplyNestedMappedTypes.types
@@= skipped -212, +212 lines =@@
 })
 
 function problematicFunction1(ors: Input[]): Output[] {
->problematicFunction1 : (ors: Input[]) => Output[]
+>problematicFunction1 : (ors: { level1: { level2: { foo: string; }; }; }[]) => { level1: { level2: { foo: string; bar: string; }; }; }[]
 >ors : { level1: { level2: { foo: string; }; }; }[]
 
     return ors;  // Error
@@= skipped -8, +8 lines =@@
 }
 
 function problematicFunction2<T extends Output[]>(ors: Input[]): T {
->problematicFunction2 : <T extends Output[]>(ors: Input[]) => T
+>problematicFunction2 : <T extends { level1: { level2: { foo: string; bar: string; }; }; }[]>(ors: { level1: { level2: { foo: string; }; }; }[]) => T
 >ors : { level1: { level2: { foo: string; }; }; }[]
 
     return ors;  // Error
@@= skipped -8, +8 lines =@@
 }
 
 function problematicFunction3(ors: (typeof Input.static)[]): Output[] {
->problematicFunction3 : (ors: (typeof Input.static)[]) => Output[]
+>problematicFunction3 : (ors: { level1: { level2: { foo: string; }; }; }[]) => { level1: { level2: { foo: string; bar: string; }; }; }[]
 >ors : { level1: { level2: { foo: string; }; }; }[]
 >Input.static : { level1: { level2: { foo: string; }; }; }
 >Input : TObject<{ level1: TObject<{ level2: TObject<{ foo: TString; }>; }>; }>
@@= skipped -112, +112 lines =@@
 >Kind : unique symbol
 
     static: PropertiesReduce<T, this['params']>
->static : Evaluate<Readonly<Partial<Pick<{ [K in keyof T]: Static<T[K], this["params"]>; }, ReadonlyOptionalPropertyKeys<T>>>> & Readonly<Pick<{ [K in keyof T]: Static<T[K], this["params"]>; }, ReadonlyPropertyKeys<T>>> & Partial<Pick<{ [K in keyof T]: Static<T[K], this["params"]>; }, OptionalPropertyKeys<T>>> & Required<Pick<{ [K in keyof T]: Static<T[K], this["params"]>; }, Exclude<keyof T, OptionalPropertyKeys<T> | ReadonlyOptionalPropertyKeys<T> | ReadonlyPropertyKeys<T>>>>>
+>static : Evaluate<Readonly<Partial<Pick<{ [K in keyof T]: Static<T[K], this["params"]> }, ReadonlyOptionalPropertyKeys<T>>>> & Readonly<Pick<{ [K in keyof T]: Static<T[K], this["params"]> }, ReadonlyPropertyKeys<T>>> & Partial<Pick<{ [K in keyof T]: Static<T[K], this["params"]> }, OptionalPropertyKeys<T>>> & Required<Pick<{ [K in keyof T]: Static<T[K], this["params"]> }, Exclude<keyof T, OptionalPropertyKeys<T> | ReadonlyOptionalPropertyKeys<T> | ReadonlyPropertyKeys<T>>>>>
 
     type: 'object'
 >type : "object"
